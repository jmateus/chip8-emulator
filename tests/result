# 1 "test-cpu.c"
# 1 "<command-line>"
# 1 "test-cpu.c"
# 1 "../cpu.h" 1



# 1 "../types.h" 1



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stdint.h" 1 3 4
# 9 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stdint.h" 3 4
# 1 "c:\\mingw\\include\\stdint.h" 1 3 4
# 27 "c:\\mingw\\include\\stdint.h" 3 4
       
# 28 "c:\\mingw\\include\\stdint.h" 3
# 1 "c:\\mingw\\include\\_mingw.h" 1 3
# 33 "c:\\mingw\\include\\_mingw.h" 3
       
# 34 "c:\\mingw\\include\\_mingw.h" 3

# 1 "c:\\mingw\\include\\sdkddkver.h" 1 3
# 26 "c:\\mingw\\include\\sdkddkver.h" 3
       
# 27 "c:\\mingw\\include\\sdkddkver.h" 3
# 36 "c:\\mingw\\include\\_mingw.h" 2 3
# 306 "c:\\mingw\\include\\_mingw.h" 3
struct threadlocalinfostruct;
struct threadmbinfostruct;
typedef struct threadlocalinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;
# 29 "c:\\mingw\\include\\stdint.h" 2 3







# 1 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stddef.h" 1 3 4
# 324 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stddef.h" 3 4
typedef short unsigned int wchar_t;
# 353 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stddef.h" 3 4
typedef short unsigned int wint_t;
# 37 "c:\\mingw\\include\\stdint.h" 2 3


typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
typedef long long int64_t;
typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
typedef long long int_least64_t;
typedef unsigned long long uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
typedef long long int_fast64_t;
typedef unsigned long long uint_fast64_t;
# 78 "c:\\mingw\\include\\stdint.h" 3
  typedef int intptr_t;
# 87 "c:\\mingw\\include\\stdint.h" 3
  typedef unsigned int uintptr_t;




typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 10 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stdint.h" 2 3 4
# 5 "../types.h" 2

typedef uint8_t u8;
typedef u8 u4;
typedef uint16_t u16;
typedef u16 u12;
typedef unsigned int u32;
# 5 "../cpu.h" 2
# 13 "../cpu.h"
typedef struct {
 u8 registers[16];
 u16 I;

 u8 dt;
 u8 st;

 u16 pc;
 u8 sp;
} CPU;


void setRegister(u4 regist, u8 value);
u8 getRegister(u4 regist);

u8 setFlag(u8 value);
u8 getFlag();

void setRegisterI(u16 value);
u16 getRegisterI();

void runInstruction(u8* instr);
void skipNextInstruction();

void addRegisters(u4 x, u4 y);
void subtractRegisters(u4 target, u4 x, u4 y);

void shiftRight(u8 reg, u8 numOfShifts);
void shiftLeft(u8 reg, u8 numOfShifts);

void storeRegisters(u12 addr, u4 reg);
void loadRegisters(u12 addr, u4 reg);

u8 generateRandomNumber(int maxValue);

void runCPU();
void initCPU();
# 2 "test-cpu.c" 2
# 1 "minunit.h" 1
# 12 "minunit.h"
# 1 "c:\\mingw\\include\\stdio.h" 1 3
# 26 "c:\\mingw\\include\\stdio.h" 3
       
# 27 "c:\\mingw\\include\\stdio.h" 3







# 1 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stddef.h" 1 3 4
# 212 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 35 "c:\\mingw\\include\\stdio.h" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stdarg.h" 1 3 4
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "c:\\mingw\\include\\stdio.h" 2 3
# 135 "c:\\mingw\\include\\stdio.h" 3
typedef struct _iobuf
{
 char* _ptr;
 int _cnt;
 char* _base;
 int _flag;
 int _file;
 int _charbuf;
 int _bufsiz;
 char* _tmpfname;
} FILE;






extern __attribute__ ((__dllimport__)) FILE _iob[];
# 165 "c:\\mingw\\include\\stdio.h" 3
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fopen (const char*, const char*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) freopen (const char*, const char*, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fflush (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fclose (FILE*);

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) remove (const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rename (const char*, const char*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) tmpfile (void);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) tmpnam (char*);


 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _tempnam (const char*, const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _rmtmp(void);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _unlink (const char*);


 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) tempnam (const char*, const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rmtmp(void);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) unlink (const char*);



 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) setvbuf (FILE*, char*, int, size_t);

 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) setbuf (FILE*, char*);
# 200 "c:\\mingw\\include\\stdio.h" 3
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_fprintf(FILE*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_printf(const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_sprintf(char*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_snprintf(char*, size_t, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vfprintf(FILE*, const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vprintf(const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vsprintf(char*, const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vsnprintf(char*, size_t, const char*, __gnuc_va_list);
# 278 "c:\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fprintf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) printf (const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) sprintf (char*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfprintf (FILE*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vprintf (const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsprintf (char*, const char*, __gnuc_va_list);
# 294 "c:\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_fprintf(FILE*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_printf(const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_sprintf(char*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vfprintf(FILE*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vprintf(const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vsprintf(char*, const char*, __gnuc_va_list);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _snprintf (char*, size_t, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vsnprintf (char*, size_t, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vscprintf (const char*, __gnuc_va_list);
# 317 "c:\\mingw\\include\\stdio.h" 3
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) snprintf (char *, size_t, const char *, ...);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsnprintf (char *, size_t, const char *, __gnuc_va_list);

int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vscanf (const char * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfscanf (FILE * __restrict__, const char * __restrict__,
       __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsscanf (const char * __restrict__,
       const char * __restrict__, __gnuc_va_list);







 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fscanf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) scanf (const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) sscanf (const char*, const char*, ...);




 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetc (FILE*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgets (char*, int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputc (int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputs (const char*, FILE*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) gets (char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) puts (const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ungetc (int, FILE*);







 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _filbuf (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _flsbuf (int, FILE*);



extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getc (FILE*);
extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getc (FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) *__F->_ptr++
    : _filbuf (__F);
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putc (int, FILE*);
extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putc (int __c, FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) (*__F->_ptr++ = (char)__c)
    : _flsbuf (__c, __F);
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getchar (void);
extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getchar (void)
{
  return (--(&_iob[0])->_cnt >= 0)
    ? (int) (unsigned char) *(&_iob[0])->_ptr++
    : _filbuf ((&_iob[0]));
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putchar(int);
extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putchar(int __c)
{
  return (--(&_iob[1])->_cnt >= 0)
    ? (int) (unsigned char) (*(&_iob[1])->_ptr++ = (char)__c)
    : _flsbuf (__c, (&_iob[1]));}
# 402 "c:\\mingw\\include\\stdio.h" 3
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fread (void*, size_t, size_t, FILE*);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwrite (const void*, size_t, size_t, FILE*);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fseek (FILE*, long, int);
 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ftell (FILE*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rewind (FILE*);

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fseek_nolock (FILE*, long, int);
 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _ftell_nolock (FILE*);

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fseeki64 (FILE*, long long, int);
 long long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _ftelli64 (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fseeki64_nolock (FILE*, long long, int);
 long long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _ftelli64_nolock (FILE*);
# 441 "c:\\mingw\\include\\stdio.h" 3
typedef long long fpos_t;

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetpos (FILE*, fpos_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fsetpos (FILE*, const fpos_t*);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) feof (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ferror (FILE*);
# 463 "c:\\mingw\\include\\stdio.h" 3
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) clearerr (FILE*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) perror (const char*);






 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _popen (const char*, const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _pclose (FILE*);


 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) popen (const char*, const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) pclose (FILE*);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _flushall (void);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fgetchar (void);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fputchar (int);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fdopen (int, const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fileno (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fcloseall (void);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fsopen (const char*, const char*, int);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _getmaxstdio (void);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _setmaxstdio (int);
# 508 "c:\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetchar (void);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputchar (int);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fdopen (int, const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fileno (FILE*);
# 520 "c:\\mingw\\include\\stdio.h" 3
# 1 "c:\\mingw\\include\\sys\\types.h" 1 3
# 26 "c:\\mingw\\include\\sys\\types.h" 3
       
# 27 "c:\\mingw\\include\\sys\\types.h" 3






# 1 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stddef.h" 1 3 4
# 147 "c:\\mingw\\lib\\gcc\\mingw32\\4.8.1\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 34 "c:\\mingw\\include\\sys\\types.h" 2 3
# 44 "c:\\mingw\\include\\sys\\types.h" 3
typedef long __time32_t;




typedef long long __time64_t;
# 60 "c:\\mingw\\include\\sys\\types.h" 3
typedef __time64_t time_t;







typedef long _off_t;

typedef _off_t off_t;





typedef long long _off64_t;

typedef long long off64_t;





typedef unsigned int _dev_t;


typedef _dev_t dev_t;






typedef short _ino_t;


typedef _ino_t ino_t;






typedef int _pid_t;


typedef _pid_t pid_t;






typedef unsigned short _mode_t;


typedef _mode_t mode_t;






typedef int _sigset_t;


typedef _sigset_t sigset_t;





typedef int _ssize_t;


typedef _ssize_t ssize_t;





typedef long long fpos64_t;
# 151 "c:\\mingw\\include\\sys\\types.h" 3
typedef unsigned int useconds_t;
# 521 "c:\\mingw\\include\\stdio.h" 2 3
extern __inline__ FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fopen64 (const char*, const char*);
extern __inline__ FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fopen64 (const char* filename, const char* mode)
{
  return fopen (filename, mode);
}

int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fseeko64 (FILE*, off64_t, int);






extern __inline__ off64_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ftello64 (FILE *);
extern __inline__ off64_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ftello64 (FILE * stream)
{
  fpos_t pos;
  if (fgetpos(stream, &pos))
    return -1LL;
  else
   return ((off64_t) pos);
}
# 551 "c:\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwprintf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wprintf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _snwprintf (wchar_t*, size_t, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfwprintf (FILE*, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vsnwprintf (wchar_t*, size_t, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vscwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwscanf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wscanf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) swscanf (const wchar_t*, const wchar_t*, ...);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetwc (FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputwc (wchar_t, FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ungetwc (wchar_t, FILE*);



 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) swprintf (wchar_t*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vswprintf (wchar_t*, const wchar_t*, __gnuc_va_list);


 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetws (wchar_t*, int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputws (const wchar_t*, FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getwc (FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getwchar (void);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putwc (wint_t, FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putwchar (wint_t);

 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _lock_file(FILE*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _unlock_file(FILE*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _getws (wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _putws (const wchar_t*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfdopen(int, const wchar_t *);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfopen (const wchar_t*, const wchar_t*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfreopen (const wchar_t*, const wchar_t*, FILE*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfsopen (const wchar_t*, const wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wtmpnam (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wtempnam (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wrename (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wremove (const wchar_t*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wperror (const wchar_t*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wpopen (const wchar_t*, const wchar_t*);



int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) snwprintf (wchar_t* s, size_t n, const wchar_t* format, ...);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __gnuc_va_list arg);





int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vwscanf (const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfwscanf (FILE * __restrict__,
         const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vswscanf (const wchar_t * __restrict__,
         const wchar_t * __restrict__, __gnuc_va_list);







 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wpopen (const wchar_t*, const wchar_t*);





 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fgetwchar (void);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _fputwchar (wint_t);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _getw (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _putw (int, FILE*);


 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetwchar (void);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputwchar (wint_t);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getw (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putw (int, FILE*);
# 13 "minunit.h" 2





FILE* outStream = ((void *)0);


static int testsRun;

static int successfulTests;


static int totalTests;

static int totalSuccessfulTests;





void setupTests() {
 if(outStream == ((void *)0)) {
  outStream = (&_iob[1]);
 }

 totalTests = 0;
 totalSuccessfulTests = 0;
}



void setupSuite() {
 testsRun = 0;
 successfulTests = 0;
}
# 3 "test-cpu.c" 2

void runTests() { setupTests(); fprintf(outStream, "##############################\n"); fprintf(outStream, "[INFO] STARTING TESTS\n"); fprintf(outStream, "##############################\n\n");

initCPU();
initMemory();

do { fprintf(outStream, "==============================\n"); fprintf(outStream, "[INFO] Starting %s\n", "Registers"); fprintf(outStream, "==============================\n\n"); setupSuite(); setRegister(0x9, 27); setRegister(0xA, 100); setRegister(0xF, 255); do { if(!(getRegister(0x9) == 27)) { fprintf(outStream, "[FAILED] %s\n", "should set registers correctly"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set registers correctly"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getRegister(0xA) == 100)) { fprintf(outStream, "[FAILED] %s\n", "should set registers correctly"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set registers correctly"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getRegister(0xF) == 255)) { fprintf(outStream, "[FAILED] %s\n", "should set registers correctly"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set registers correctly"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; setFlag(145); do { if(!(getFlag() == 145)) { fprintf(outStream, "[FAILED] %s\n", "should set flag register correctly"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set flag register correctly"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; setRegisterI(65500); do { if(!(getRegisterI() == 65500)) { fprintf(outStream, "[FAILED] %s\n", "should set register I correctly"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set register I correctly"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; fprintf(outStream, "\n[FINISHED] %d out of %d tests were successful\n\n", successfulTests, testsRun); } while(0);
# 24 "test-cpu.c"
 ;


do { fprintf(outStream, "==============================\n"); fprintf(outStream, "[INFO] Starting %s\n", "Arithmetic ops with registers"); fprintf(outStream, "==============================\n\n"); setupSuite(); setRegister(0xA, 100); setRegister(0xB, 155); addRegisters(0xA, 0xB); do { if(!(getRegister(0xA) == 255)) { fprintf(outStream, "[FAILED] %s\n", "should add registers correctly when it doesn't overflow"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should add registers correctly when it doesn't overflow"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getFlag() == 0)) { fprintf(outStream, "[FAILED] %s\n", "should set flag to 0"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set flag to 0"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; setRegister(0xA, 102); setRegister(0xB, 155); addRegisters(0xA, 0xB); do { if(!(getRegister(0xA) == 1)) { fprintf(outStream, "[FAILED] %s\n", "should overflow addition correctly"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should overflow addition correctly"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getFlag() == 1)) { fprintf(outStream, "[FAILED] %s\n", "should set flag to 1"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set flag to 1"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; fprintf(outStream, "\n[FINISHED] %d out of %d tests were successful\n\n", successfulTests, testsRun); } while(0);
# 46 "test-cpu.c"
 ;


do { fprintf(outStream, "==============================\n"); fprintf(outStream, "[INFO] Starting %s\n", "Shift right with registers"); fprintf(outStream, "==============================\n\n"); setupSuite(); setRegister(0xA, 140); shiftRight(0xA, 1); do { if(!(getRegister(0xA) == 70)) { fprintf(outStream, "[FAILED] %s\n", "should do shift right correctly when LS bit is 0"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should do shift right correctly when LS bit is 0"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getFlag() == 0)) { fprintf(outStream, "[FAILED] %s\n", "should set flag to 0"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set flag to 0"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; setRegister(0xA, 141); shiftRight(0xA, 1); do { if(!(getRegister(0xA) == 70)) { fprintf(outStream, "[FAILED] %s\n", "should do shift right correctly when LS bit is 1"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should do shift right correctly when LS bit is 1"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getFlag() == 1)) { fprintf(outStream, "[FAILED] %s\n", "should set flag to 1"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set flag to 1"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; fprintf(outStream, "\n[FINISHED] %d out of %d tests were successful\n\n", successfulTests, testsRun); } while(0);
# 62 "test-cpu.c"
 ;


do { fprintf(outStream, "==============================\n"); fprintf(outStream, "[INFO] Starting %s\n", "Shift left with registers"); fprintf(outStream, "==============================\n\n"); setupSuite(); setRegister(0xA, 120); shiftLeft(0xA, 1); do { if(!(getRegister(0xA) == 240)) { fprintf(outStream, "[FAILED] %s\n", "should do shift left correctly when MS bit is 0"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should do shift left correctly when MS bit is 0"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getFlag() == 0)) { fprintf(outStream, "[FAILED] %s\n", "should set flag to 0"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set flag to 0"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; setRegister(0xA, 130); shiftLeft(0xA, 1); do { if(!(getRegister(0xA) == 4)) { fprintf(outStream, "[FAILED] %s\n", "should do shift left correctly when MS bit is 1"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should do shift left correctly when MS bit is 1"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(getFlag() == 1)) { fprintf(outStream, "[FAILED] %s\n", "should set flag to 1"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should set flag to 1"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; fprintf(outStream, "\n[FINISHED] %d out of %d tests were successful\n\n", successfulTests, testsRun); } while(0);
# 78 "test-cpu.c"
 ;


do { fprintf(outStream, "==============================\n"); fprintf(outStream, "[INFO] Starting %s\n", "Load and store registers"); fprintf(outStream, "==============================\n\n"); setupSuite(); int i; for(i = 0; i < 16; i++) { setRegister(i, i*3); } storeRegisters(100, 15); for(i = 0; i < 16; i++) { setRegister(i, 0); } loadRegisters(100, 15); int numOfCorrectValues; for(i = 0, numOfCorrectValues = 0; i < 16; i++) { int value = getRegister(i); if(value == i*3) { numOfCorrectValues++; } } do { if(!(numOfCorrectValues == 16)) { fprintf(outStream, "[FAILED] %s\n", "should store and load registers to memory correctly"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should store and load registers to memory correctly"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; fprintf(outStream, "\n[FINISHED] %d out of %d tests were successful\n\n", successfulTests, testsRun); } while(0);
# 107 "test-cpu.c"
 ;


do { fprintf(outStream, "==============================\n"); fprintf(outStream, "[INFO] Starting %s\n", "Random number"); fprintf(outStream, "==============================\n\n"); setupSuite(); u8 rnd = generateRandomNumber(256); do { if(!(rnd >= 0)) { fprintf(outStream, "[FAILED] %s\n", "should be equal or greater than zero"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should be equal or greater than zero"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; do { if(!(rnd < 256)) { fprintf(outStream, "[FAILED] %s\n", "should be less than 256"); testsRun++; totalTests++; } else { fprintf(outStream, "[SUCCESS] %s\n", "should be less than 256"); testsRun++; totalTests++; successfulTests++; totalSuccessfulTests++; } } while(0);; fprintf(outStream, "\n[FINISHED] %d out of %d tests were successful\n\n", successfulTests, testsRun); } while(0);
# 119 "test-cpu.c"
fprintf(outStream, "##############################\n"); fprintf(outStream, "[INFO] ENDED TESTS\n"); fprintf(outStream, "\n[FINISHED] %d out of %d tests were successful\n", totalSuccessfulTests, totalTests); fprintf(outStream, "##############################\n\n"); } int main(int argc, char **argv) { runTests(); return 0; }
